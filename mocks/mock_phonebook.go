// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sapawarga/phonebook-service/repository (interfaces: PhoneBookI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/sapawarga/phonebook-service/model"
	reflect "reflect"
)

// MockPhoneBookI is a mock of PhoneBookI interface
type MockPhoneBookI struct {
	ctrl     *gomock.Controller
	recorder *MockPhoneBookIMockRecorder
}

// MockPhoneBookIMockRecorder is the mock recorder for MockPhoneBookI
type MockPhoneBookIMockRecorder struct {
	mock *MockPhoneBookI
}

// NewMockPhoneBookI creates a new mock instance
func NewMockPhoneBookI(ctrl *gomock.Controller) *MockPhoneBookI {
	mock := &MockPhoneBookI{ctrl: ctrl}
	mock.recorder = &MockPhoneBookIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPhoneBookI) EXPECT() *MockPhoneBookIMockRecorder {
	return m.recorder
}

// GetListPhoneBook mocks base method
func (m *MockPhoneBookI) GetListPhoneBook(arg0 context.Context, arg1 *model.GetListRequest) ([]*model.PhoneBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListPhoneBook", arg0, arg1)
	ret0, _ := ret[0].([]*model.PhoneBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListPhoneBook indicates an expected call of GetListPhoneBook
func (mr *MockPhoneBookIMockRecorder) GetListPhoneBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPhoneBook", reflect.TypeOf((*MockPhoneBookI)(nil).GetListPhoneBook), arg0, arg1)
}

// GetMetaDataPhoneBook mocks base method
func (m *MockPhoneBookI) GetMetaDataPhoneBook(arg0 context.Context, arg1 *model.GetListRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaDataPhoneBook", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaDataPhoneBook indicates an expected call of GetMetaDataPhoneBook
func (mr *MockPhoneBookIMockRecorder) GetMetaDataPhoneBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaDataPhoneBook", reflect.TypeOf((*MockPhoneBookI)(nil).GetMetaDataPhoneBook), arg0, arg1)
}

// GetPhonebook mocks base method
func (m *MockPhoneBookI) GetPhonebook(arg0 context.Context, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhonebook", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhonebook indicates an expected call of GetPhonebook
func (mr *MockPhoneBookIMockRecorder) GetPhonebook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhonebook", reflect.TypeOf((*MockPhoneBookI)(nil).GetPhonebook), arg0, arg1)
}

// Insert mocks base method
func (m *MockPhoneBookI) Insert(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockPhoneBookIMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPhoneBookI)(nil).Insert), arg0, arg1)
}
